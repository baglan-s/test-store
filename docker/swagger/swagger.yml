openapi: 3.0.3
info:
  title: Swagger Studia3D - OpenAPI 3.0
  description: |-
    Документация по главному Backend API
  termsOfService: http://swagger.io/terms/
  contact:
    email: baglansariev@mail.ru
  version: 1.0.0
externalDocs:
  description: Find out more about Swagger
  url: http://swagger.io
servers:
  - url: http://localhost:6000/api
paths:
  /login:
    post:
      tags:
        - Auth
      summary: Аутентификация пользователя
      description: Получить токен текущего пользователя
      parameters:
        - name: Accept
          in: header
          required: true
          schema:
            type: string
          example: application/json
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                email:
                  type: string
                  example: user@user.ru
                password:
                  type: string
                  example: password
      responses:
        '200':
          description: Successful operation
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    $ref: '#/components/schemas/UserTokenData'
        '401':
          description: (Unauthorized) Ошибка атворизации
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: Incorrect user password.
  
  /register:
    post:
      tags:
        - Auth
      summary: Регистрация пользователя
      description: Зарегистрировать нового пользователя
      parameters:
        - name: Accept
          in: header
          required: true
          schema:
            type: string
          example: application/json
      requestBody:
        content:
          application/json:
            schema:
              type: object
              required: [name, email, password, password_confirmation]
              properties:
                name:
                  type: string
                  example: Иван Иванов
                email:
                  type: string
                  example: ivanov@ivan.com
                phone:
                  type: string
                  example: "+7-777-777-77-77"
                password:
                  type: string
                  example: 1234325
                password_confirmation:
                  type: string
                  example: 1234325
      responses:
        '200':
          description: Successful operation
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    $ref: '#/components/schemas/UserTokenData'
        '401':
          description: (Unauthorized) Ошибка атворизации
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: Incorrect user password.
        '422':
          description: Draft - Validation exception
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: "The name field is required. (and 1 more error)"

  /logout:
    post:
      tags:
        - Auth
      summary: Выход из системы
      description: Удалить текущий токен пользователя
      security:
        - bearer: []
      parameters:
        - name: Accept
          in: header
          required: true
          schema:
            type: string
          example: application/json
      responses:
        '200':
          description: Successful operation
          content:
            application/json:
              schema:
                type: object
        '401':
          description: (Unauthorized) Ошибка атворизации
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: Unauthenticated.

  /users:
    get:
      tags:
        - Users
      summary: Получить список пользователей
      description: Метод позволяет получить список пользователей
      security:
        - bearer: []
      parameters:
        - name: Accept
          in: header
          required: true
          schema:
            type: string
          example: application/json
        - name: limit
          in: query
          description: Кол-во записей
          example: 20
          schema:
            type: integer
            format: int64
        - name: page
          in: query
          description: Номер страницы
          example: 1
          schema:
            type: integer
            format: int64
      responses:
        '200':
          description: Successful operation
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    type: array
                    items:
                      $ref: '#/components/schemas/User'
                  meta:
                    $ref: '#/components/schemas/Meta'
                  link:
                    $ref: '#/components/schemas/Link'
        '401':
          description: (Unauthorized) Ошибка атворизации
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: Unauthenticated.

    post:
      tags:
        - Users
      summary: Создать пользователя
      description: Метод позволяет создать пользователя
      security:
        - bearer: []
      parameters:
        - name: Accept
          in: header
          required: true
          schema:
            type: string
          example: application/json
      requestBody:
        content:
          application/json:
            schema:
              type: object
              required: [name, email, password, password_confirmation]
              properties:
                name:
                  type: string
                  example: Иван Иванов
                email:
                  type: string
                  example: ivanov@ivan.com
                phone:
                  type: string
                  example: "+7-777-777-77-77"
                password:
                  type: string
                  example: 1234325
                password_confirmation:
                  type: string
                  example: 1234325
      responses:
        '200':
          description: Successful operation
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    $ref: '#/components/schemas/User'
        '401':
          description: (Unauthorized) Ошибка атворизации
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: Unauthenticated.
        '422':
          description: Draft - Validation exception
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: "The name field is required. (and 1 more error)"
  
  /users/{id}:
    get:
      tags:
        - Users
      summary: Получить пользователя по ID
      description: Метод позволяет получить пользователя по ID
      security:
        - bearer: []
      parameters:
        - name: Accept
          in: header
          required: true
          schema:
            type: string
          example: application/json
        - name: id
          in: path
          required: true
          schema:
            type: integer
            format: int64
            example: 1
      responses:
        '200':
          description: Successful operation
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    $ref: '#/components/schemas/User'
        '401':
          description: (Unauthorized) Ошибка атворизации
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: Unauthenticated.
        '404':
          description: Сущность не найдена
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    type: object
                    properties:
                      code:
                        type: integer
                        example: 404
                      message:
                        type: string
                        example: Entity not found!

    put:
      tags:
        - Users
      summary: Изменить пользователя по ID
      description: Метод позволяет изменить пользователя по ID
      security:
        - bearer: []
      parameters:
        - name: Accept
          in: header
          required: true
          schema:
            type: string
          example: application/json
        - name: id
          in: path
          required: true
          schema:
            type: integer
            format: int64
            example: 1
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                name:
                  type: string
                  example: Иван Иванов
                email:
                  type: string
                  example: ivanov@ivan.com
                password:
                  type: string
                  example: 1234325
                password_confirmation:
                  type: string
                  example: 1234325
      responses:
        '200':
          description: Successful operation
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    $ref: '#/components/schemas/User'
        '401':
          description: (Unauthorized) Ошибка атворизации
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: Unauthenticated.
        '404':
          description: Сущность не найдена
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    type: object
                    properties:
                      code:
                        type: integer
                        example: 404
                      message:
                        type: string
                        example: Entity not found!
        '422':
          description: Draft - Validation exception
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: "The name field is required. (and 1 more error)"

    delete:
      tags:
        - Users
      summary: Удалить пользователя по ID
      description: Метод позволяет удалить пользователя по ID
      security:
        - bearer: []
      parameters:
        - name: Accept
          in: header
          required: true
          schema:
            type: string
          example: application/json
        - name: id
          in: path
          required: true
          schema:
            type: integer
            format: int64
            example: 1
      responses:
        '200':
          description: Successful operation
          content:
            application/json:
              schema:
                type: object
        '401':
          description: (Unauthorized) Ошибка атворизации
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: Unauthenticated.
        '404':
          description: Сущность не найдена
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    type: object
                    properties:
                      code:
                        type: integer
                        example: 404
                      message:
                        type: string
                        example: Entity not found!

  /cart/{id}:
    get:
      tags:
        - Cart
      summary: Получить данные корзины
      description: Метод позволяет получить сданные корзины (список товаров)
      parameters:
        - name: Accept
          in: header
          required: true
          schema:
            type: string
          example: application/json
        - name: id
          in: path
          required: true
          schema:
            type: integer
            format: int64
            example: 1
      responses:
        '200':
          description: Successful operation
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    type: object
                    $ref: '#/components/schemas/Cart'
  
  /cart/add/{id}:
    put:
      tags:
        - Cart
      summary: Добавить товар в корзину
      description: Метод позволяет добавить товар в корзину
      parameters:
        - name: Accept
          in: header
          required: true
          schema:
            type: string
          example: application/json
        - name: id
          in: path
          required: true
          schema:
            type: integer
            format: int64
            example: 1
      requestBody:
        content:
          application/json:
            schema:
              type: object
              required: [session_id, product_id, quantity]
              properties:
                product_id:
                  type: integer
                  example: 1
                quantity:
                  type: integer
                  example: 1
      responses:
        '200':
          description: Successful operation
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    $ref: '#/components/schemas/Cart'
        '422':
          description: Draft - Validation exception
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: "The name field is required. (and 1 more error)"

  /cart/remove/{id}:
    put:
      tags:
        - Cart
      summary: Убрать товар из корзины
      description: Метод позволяет убрать товар из корзины (по количеству)
      parameters:
        - name: Accept
          in: header
          required: true
          schema:
            type: string
          example: application/json
        - name: id
          in: path
          required: true
          schema:
            type: integer
            format: int64
            example: 1
      requestBody:
        content:
          application/json:
            schema:
              type: object
              required: [session_id, product_id, quantity]
              properties:
                product_id:
                  type: integer
                  example: 1
                quantity:
                  type: integer
                  example: 1
      responses:
        '200':
          description: Successful operation
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    $ref: '#/components/schemas/Cart'
        '422':
          description: Draft - Validation exception
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: "The name field is required. (and 1 more error)"

  /cart/clear/{id}:
    delete:
      tags:
        - Cart
      summary: Очистить корзину
      description: Метод позволяет очистить корзину
      parameters:
        - name: Accept
          in: header
          required: true
          schema:
            type: string
          example: application/json
        - name: id
          in: path
          required: true
          schema:
            type: integer
            format: int64
            example: 1
      responses:
        '200':
          description: Successful operation
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    $ref: '#/components/schemas/Cart'
        '422':
          description: Draft - Validation exception
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: "The name field is required. (and 1 more error)"


  /orders:
    get:
      tags:
        - Orders
      summary: Получить список заказов
      description: Метод позволяет получить список заказов авторизованых пользователей
      security:
        - bearer: []
      parameters:
        - name: Accept
          in: header
          required: true
          schema:
            type: string
          example: application/json
        - name: limit
          in: query
          description: Кол-во записей
          example: 20
          schema:
            type: integer
            format: int64
        - name: page
          in: query
          description: Номер страницы
          example: 1
          schema:
            type: integer
            format: int64
      responses:
        '200':
          description: Successful operation
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    type: array
                    items:
                      $ref: '#/components/schemas/Order'
                  meta:
                    $ref: '#/components/schemas/Meta'
                  link:
                    $ref: '#/components/schemas/Link'
        '401':
          description: (Unauthorized) Ошибка атворизации
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: Unauthenticated.
    post:
      tags:
        - Orders
      summary: Создать заказ
      description: Метод позволяет создать заказ
      parameters:
        - name: Accept
          in: header
          required: true
          schema:
            type: string
          example: application/json
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                cart_id:
                  type: integer
                  example: 1
                customer_email:
                  type: string
                  example: "tester@test.com"
                customer_phone:
                  type: string
                  example: "+77014444444"
      responses:
        '200':
          description: Successful operation
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    $ref: '#/components/schemas/Order'
        '401':
          description: (Unauthorized) Ошибка атворизации
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: Unauthenticated.
        '422':
          description: Draft - Validation exception
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: "The name field is required. (and 1 more error)"

  /orders/{id}:
    get:
      tags:
        - Orders
      summary: Получить заказ по ID
      description: Метод позволяет получить заказ по ID
      security:
        - bearer: []
      parameters:
        - name: Accept
          in: header
          required: true
          schema:
            type: string
          example: application/json
        - name: id
          in: path
          required: true
          schema:
            type: integer
            format: int64
            example: 1
      responses:
        '200':
          description: Successful operation
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    $ref: '#/components/schemas/Order'
        '401':
          description: (Unauthorized) Ошибка атворизации
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: Unauthenticated.
        '404':
          description: Сущность не найдена
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    type: object
                    properties:
                      code:
                        type: integer
                        example: 404
                      message:
                        type: string
                        example: Entity not found!


  /product_categories:
    get:
      tags:
        - ProductCategories
      summary: Получить список категорий продуктов
      description: Метод позволяет получить список категорий продуктов
      security:
        - bearer: []
      parameters:
        - name: Accept
          in: header
          required: true
          schema:
            type: string
          example: application/json
        - name: limit
          in: query
          description: Кол-во записей
          example: 20
          schema:
            type: integer
            format: int64
        - name: page
          in: query
          description: Номер страницы
          example: 1
          schema:
            type: integer
            format: int64
      responses:
        '200':
          description: Successful operation
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    type: array
                    items:
                      $ref: '#/components/schemas/ProductCategory'
                  meta:
                    $ref: '#/components/schemas/Meta'
                  link:
                    $ref: '#/components/schemas/Link'
        '401':
          description: (Unauthorized) Ошибка атворизации
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: Unauthenticated.
    post:
      tags:
        - ProductCategories
      summary: Создать категорию продукта
      description: Метод позволяет создать категорию продукта
      security:
        - bearer: []
      parameters:
        - name: Accept
          in: header
          required: true
          schema:
            type: string
          example: application/json
      requestBody:
        content:
          application/json:
            schema:
              type: object
              required: [name]
              properties:
                name:
                  type: string
                  example: Category1
                parent_id:
                  type: integer
                  format: int64
                  example: 2
                slug:
                  type: string
                  example: category1
                description:
                  type: string
                  example: "Category1 description"
      responses:
        '200':
          description: Successful operation
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    $ref: '#/components/schemas/ProductCategory'
        '401':
          description: (Unauthorized) Ошибка атворизации
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: Unauthenticated.
        '422':
          description: Draft - Validation exception
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: "The name field is required. (and 1 more error)"

  /product_categories/{id}:
    get:
      tags:
        - ProductCategories
      summary: Получить категорию продуктов по ID
      description: Метод позволяет получить категорию продуктов по ID
      security:
        - bearer: []
      parameters:
        - name: Accept
          in: header
          required: true
          schema:
            type: string
          example: application/json
        - name: id
          in: path
          required: true
          schema:
            type: integer
            format: int64
            example: 1
      responses:
        '200':
          description: Successful operation
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    $ref: '#/components/schemas/ProductCategory'
        '401':
          description: (Unauthorized) Ошибка атворизации
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: Unauthenticated.
        '404':
          description: Сущность не найдена
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    type: object
                    properties:
                      code:
                        type: integer
                        example: 404
                      message:
                        type: string
                        example: Entity not found!
    put:
      tags:
        - ProductCategories
      summary: Изменить категорию продуктов по ID
      description: Метод позволяет изменить категорию продуктов по ID
      security:
        - bearer: []
      parameters:
        - name: Accept
          in: header
          required: true
          schema:
            type: string
          example: application/json
        - name: id
          in: path
          required: true
          schema:
            type: integer
            format: int64
            example: 1
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                name:
                  type: string
                  example: Category1-changed
                slug:
                  type: string
                  example: category1-changed
                description:
                  type: string
                  example: "Changed description"
      responses:
        '200':
          description: Successful operation
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    $ref: '#/components/schemas/ProductCategory'
        '401':
          description: (Unauthorized) Ошибка атворизации
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: Unauthenticated.
        '404':
          description: Сущность не найдена
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    type: object
                    properties:
                      code:
                        type: integer
                        example: 404
                      message:
                        type: string
                        example: Entity not found!
        '422':
          description: Draft - Validation exception
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: "The name field is required. (and 1 more error)"

    delete:
      tags:
        - ProductCategories
      summary: Удалить категорию продуктов по ID
      description: Метод позволяет удалить категорию продуктов по ID
      security:
        - bearer: []
      parameters:
        - name: Accept
          in: header
          required: true
          schema:
            type: string
          example: application/json
        - name: id
          in: path
          required: true
          schema:
            type: integer
            format: int64
            example: 1
      responses:
        '200':
          description: Successful operation
          content:
            application/json:
              schema:
                type: object
        '401':
          description: (Unauthorized) Ошибка атворизации
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: Unauthenticated.
        '404':
          description: Сущность не найдена
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    type: object
                    properties:
                      code:
                        type: integer
                        example: 404
                      message:
                        type: string
                        example: Entity not found!

  /products:
    get:
      tags:
        - Products
      summary: Получить список товаров
      description: Метод позволяет получить список товаров
      security:
        - bearer: []
      parameters:
        - name: Accept
          in: header
          required: true
          schema:
            type: string
          example: application/json
        - name: limit
          in: query
          description: Кол-во записей
          example: 20
          schema:
            type: integer
            format: int64
        - name: page
          in: query
          description: Номер страницы
          example: 1
          schema:
            type: integer
            format: int64
        - name: search
          in: query
          description: Строка для поиска по названию
          example: 3D Model
          schema:
            type: string
        - name: specs
          in: query
          description: "Фильтрация по ID характеристик и их значениий. Шаблон параметра: ?specs=1-3;4;5,2-3,12-4;5. Где сначала идет ID (1) характеристики с разделителем '-' далее идет ID значений (3). Если значений несколько то они разделяются с ';' (Пример: ?specs=1-3;4;5). Каждый блок с ID характеристик и их значений разделяются через запятую ',' (Пример: ?specs=1-3;4;5,2-3)"
          example: 1-3
          schema:
            type: string
        - name: product_category_id
          in: query
          description: Фильтрация по категории товара (Можно задавать несколько разделяя запятыми (,))
          example: 1,2,3
          schema:
            type: string
      responses:
        '200':
          description: Successful operation
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    type: array
                    items:
                      $ref: '#/components/schemas/Product'
                  meta:
                    $ref: '#/components/schemas/Meta'
                  link:
                    $ref: '#/components/schemas/Link'
        '401':
          description: (Unauthorized) Ошибка атворизации
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: Unauthenticated.
    post:
      tags:
        - Products
      summary: Создать товар
      description: Метод позволяет создать товар
      security:
        - bearer: []
      parameters:
        - name: Accept
          in: header
          required: true
          schema:
            type: string
          example: application/json
      requestBody:
        content:
          application/json:
            schema:
              type: object
              required: [name]
              properties:
                name:
                  type: string
                  example: Category1
                product_category_id:
                  type: integer
                  format: int64
                  example: 2
                slug:
                  type: string
                  example: category1
                  nullable: true
                description:
                  type: string
                  example: "Category1 description"
                price:
                  type: float
                  example: 120.00
                specifications:
                  type: array
                  items:
                    type: object
                    properties:
                      specification_id:
                        type: integer
                        format: int64
                        example: 1
                      specification_value_id:
                        type: integer
                        format: int64
                        example: 1
      responses:
        '200':
          description: Successful operation
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    $ref: '#/components/schemas/Product'
        '401':
          description: (Unauthorized) Ошибка атворизации
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: Unauthenticated.
        '422':
          description: Draft - Validation exception
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: "The name field is required. (and 1 more error)"
  
  /products/{id}:
    get:
      tags:
        - Products
      summary: Получить товар по ID
      security:
        - bearer: []
      description: Метод позволяет получить товар по ID
      parameters:
        - name: Accept
          in: header
          required: true
          schema:
            type: string
          example: application/json
        - name: id
          in: path
          required: true
          schema:
            type: integer
            format: int64
            example: 1
      responses:
        '200':
          description: Successful operation
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    $ref: '#/components/schemas/Product'
        '401':
          description: (Unauthorized) Ошибка атворизации
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: Unauthenticated.
        '404':
          description: Сущность не найдена
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    type: object
                    properties:
                      code:
                        type: integer
                        example: 404
                      message:
                        type: string
                        example: Entity not found!
    put:
      tags:
        - Products
      summary: Изменить товар по ID
      security:
        - bearer: []
      description: Метод позволяет изменить товар по ID
      parameters:
        - name: Accept
          in: header
          required: true
          schema:
            type: string
          example: application/json
        - name: id
          in: path
          required: true
          schema:
            type: integer
            format: int64
            example: 1
      requestBody:
        content:
          application/json:
            schema:
              type: object
              required: [name]
              properties:
                name:
                  type: string
                  example: Category1
                product_category_id:
                  type: integer
                  format: int64
                  example: 2
                  nullable: true
                slug:
                  type: string
                  example: category1
                  nullable: true
                description:
                  type: string
                  example: "Category1 description"
                price:
                  type: float
                  example: 120.00
                specifications:
                  type: array
                  items:
                    type: object
                    properties:
                      specification_id:
                        type: integer
                        format: int64
                        example: 1
                      specification_value_id:
                        type: integer
                        format: int64
                        example: 1
      responses:
        '200':
          description: Successful operation
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    $ref: '#/components/schemas/Product'
        '401':
          description: (Unauthorized) Ошибка атворизации
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: Unauthenticated.
        '404':
          description: Сущность не найдена
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    type: object
                    properties:
                      code:
                        type: integer
                        example: 404
                      message:
                        type: string
                        example: Entity not found!
        '422':
          description: Draft - Validation exception
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: "The name field is required. (and 1 more error)"

    delete:
      tags:
        - Products
      summary: Удалить товар по ID
      description: Метод позволяет удалить товар по ID
      security:
        - bearer: []
      parameters:
        - name: Accept
          in: header
          required: true
          schema:
            type: string
          example: application/json
        - name: id
          in: path
          required: true
          schema:
            type: integer
            format: int64
            example: 1
      responses:
        '200':
          description: Successful operation
          content:
            application/json:
              schema:
                type: object
        '401':
          description: (Unauthorized) Ошибка атворизации
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: Unauthenticated.
        '404':
          description: Сущность не найдена
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    type: object
                    properties:
                      code:
                        type: integer
                        example: 404
                      message:
                        type: string
                        example: Entity not found!

  /specifications:
    get:
      tags:
        - Specifications
      summary: Получить список характеристик
      description: Метод позволяет получить список характеристик
      security:
      parameters:
        - name: Accept
          in: header
          required: true
          schema:
            type: string
          example: application/json
        - name: limit
          in: query
          description: Кол-во записей
          example: 20
          schema:
            type: integer
            format: int64
        - name: page
          in: query
          description: Номер страницы
          example: 1
          schema:
            type: integer
            format: int64
      responses:
        '200':
          description: Successful operation
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    type: array
                    items:
                      $ref: '#/components/schemas/Specification'
                  meta:
                    $ref: '#/components/schemas/Meta'
                  link:
                    $ref: '#/components/schemas/Link'
        '401':
          description: (Unauthorized) Ошибка атворизации
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: Unauthenticated.

    post:
      tags:
        - Specifications
      summary: Создать характеристику товара
      description: Метод позволяет создать характеристику товара
      security:
        - bearer: []
      parameters:
        - name: Accept
          in: header
          required: true
          schema:
            type: string
          example: application/json
      requestBody:
        content:
          application/json:
            schema:
              type: object
              required: [name]
              properties:
                name:
                  type: string
                  example: Specification
                description:
                  type: string
                  nullable: true
                  example: "Specification description"
      responses:
        '200':
          description: Successful operation
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    $ref: '#/components/schemas/Specification'
        '401':
          description: (Unauthorized) Ошибка атворизации
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: Unauthenticated.
        '422':
          description: Draft - Validation exception
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: "The name field is required. (and 1 more error)"

  /specifications/{id}:
    get:
      tags:
        - Specifications
      summary: Получить характеристику товара по ID
      description: Метод позволяет получить характеристику товара по ID
      parameters:
        - name: Accept
          in: header
          required: true
          schema:
            type: string
          example: application/json
        - name: id
          in: path
          required: true
          schema:
            type: integer
            format: int64
            example: 1
      responses:
        '200':
          description: Successful operation
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    $ref: '#/components/schemas/Specification'
        '401':
          description: (Unauthorized) Ошибка атворизации
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: Unauthenticated.
        '404':
          description: Сущность не найдена
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    type: object
                    properties:
                      code:
                        type: integer
                        example: 404
                      message:
                        type: string
                        example: Entity not found!
    put:
      tags:
        - Specifications
      summary: Изменить характеристику товара по ID
      description: Метод позволяет изменить характеристику товара по ID
      security:
        - bearer: []
      parameters:
        - name: Accept
          in: header
          required: true
          schema:
            type: string
          example: application/json
        - name: id
          in: path
          required: true
          schema:
            type: integer
            format: int64
            example: 1
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                name:
                  type: string
                  example: Specification changed
                description:
                  type: string
                  nullable: true
                  example: "Changed description"
      responses:
        '200':
          description: Successful operation
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    $ref: '#/components/schemas/Specification'
        '401':
          description: (Unauthorized) Ошибка атворизации
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: Unauthenticated.
        '422':
          description: Draft - Validation exception
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: "The name field is required. (and 1 more error)"
        '404':
          description: Сущность не найдена
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    type: object
                    properties:
                      code:
                        type: integer
                        example: 404
                      message:
                        type: string
                        example: Detail not found!
    delete:
      tags:
        - Specifications
      summary: Удалить характеристику товара по ID
      description: Метод позволяет удалить характеристику товара по ID
      parameters:
        - name: Accept
          in: header
          required: true
          schema:
            type: string
          example: application/json
        - name: id
          in: path
          required: true
          schema:
            type: integer
            format: int64
            example: 1
      responses:
        '200':
          description: Successful operation
          content:
            application/json:
              schema:
                type: object
        '401':
          description: (Unauthorized) Ошибка атворизации
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: Unauthenticated.
        '404':
          description: Сущность не найдена
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    type: object
                    properties:
                      code:
                        type: integer
                        example: 404
                      message:
                        type: string
                        example: Entity not found!

  /specification-values:
    get:
      tags:
        - SpecificationValues
      summary: Получить список значений характеристик
      description: Метод позволяет получить список значений характеристик
      security:
      parameters:
        - name: Accept
          in: header
          required: true
          schema:
            type: string
          example: application/json
        - name: limit
          in: query
          description: Кол-во записей
          example: 20
          schema:
            type: integer
            format: int64
        - name: page
          in: query
          description: Номер страницы
          example: 1
          schema:
            type: integer
            format: int64
      responses:
        '200':
          description: Successful operation
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    type: array
                    items:
                      $ref: '#/components/schemas/SpecificationValue'
                  meta:
                    $ref: '#/components/schemas/Meta'
                  link:
                    $ref: '#/components/schemas/Link'
        '401':
          description: (Unauthorized) Ошибка атворизации
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: Unauthenticated.

    post:
      tags:
        - SpecificationValues
      summary: Создать значение характеристики товара
      description: Метод позволяет создать значение характеристики товара
      security:
        - bearer: []
      parameters:
        - name: Accept
          in: header
          required: true
          schema:
            type: string
          example: application/json
      requestBody:
        content:
          application/json:
            schema:
              type: object
              required: [name]
              properties:
                name:
                  type: string
                  example: Specification Value
                specification_id:
                  type: integer
                  format: int64
                  example: 2
      responses:
        '200':
          description: Successful operation
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    $ref: '#/components/schemas/SpecificationValue'
        '401':
          description: (Unauthorized) Ошибка атворизации
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: Unauthenticated.
        '422':
          description: Draft - Validation exception
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: "The name field is required. (and 1 more error)"

  /specification-values/{id}:
    get:
      tags:
        - SpecificationValues
      summary: Получить значение характеристики товара по ID
      description: Метод позволяет получить значение характеристики товара по ID
      parameters:
        - name: Accept
          in: header
          required: true
          schema:
            type: string
          example: application/json
        - name: id
          in: path
          required: true
          schema:
            type: integer
            format: int64
            example: 1
      responses:
        '200':
          description: Successful operation
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    $ref: '#/components/schemas/SpecificationValue'
        '401':
          description: (Unauthorized) Ошибка атворизации
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: Unauthenticated.
        '404':
          description: Сущность не найдена
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    type: object
                    properties:
                      code:
                        type: integer
                        example: 404
                      message:
                        type: string
                        example: Entity not found!
    put:
      tags:
        - SpecificationValues
      summary: Изменить значение характеристики товара по ID
      description: Метод позволяет изменить значение характеристики товара по ID
      security:
        - bearer: []
      parameters:
        - name: Accept
          in: header
          required: true
          schema:
            type: string
          example: application/json
        - name: id
          in: path
          required: true
          schema:
            type: integer
            format: int64
            example: 1
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                name:
                  type: string
                  example: Specification Value changed
                parent_id:
                  type: integer
                  format: int64
                  example: 3
      responses:
        '200':
          description: Successful operation
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    $ref: '#/components/schemas/SpecificationValue'
        '401':
          description: (Unauthorized) Ошибка атворизации
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: Unauthenticated.
        '422':
          description: Draft - Validation exception
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: "The name field is required. (and 1 more error)"
        '404':
          description: Сущность не найдена
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    type: object
                    properties:
                      code:
                        type: integer
                        example: 404
                      message:
                        type: string
                        example: Detail not found!
    delete:
      tags:
        - SpecificationValues
      summary: Удалить значение характеристики товара по ID
      description: Метод позволяет удалить значение характеристики товара по ID
      parameters:
        - name: Accept
          in: header
          required: true
          schema:
            type: string
          example: application/json
        - name: id
          in: path
          required: true
          schema:
            type: integer
            format: int64
            example: 1
      responses:
        '200':
          description: Successful operation
          content:
            application/json:
              schema:
                type: object
        '401':
          description: (Unauthorized) Ошибка атворизации
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: Unauthenticated.
        '404':
          description: Сущность не найдена
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    type: object
                    properties:
                      code:
                        type: integer
                        example: 404
                      message:
                        type: string
                        example: Entity not found!

  
components:
  schemas:
    ErrorValidation:
      type: object
      properties:
        message:
          type: string
          example: The name field is required. (and 2 more errors)
        errors:
          type: object
          nullable: true
      xml:
        name: '##error-validation'
    Meta:
      type: object
      properties:
        current_page:
          type: integer
          format: int32
          example: 1
        from:
          type: integer
          nullable: true
          format: int32
          example: 10
        last_page:
          type: integer
          format: int32
          example: 10
        links:
          type: array
          items:
            $ref: '#/components/schemas/MetaLink'
        path:
          type: string
          example: https://stage.api.mazzon.ru/categories
        per_page:
          type: integer
          format: int32
          example: 10
        to:
          type: integer
          nullable: true
          format: int32
          example: 10
        total:
          type: integer
          format: int32
          example: 10
      xml:
        name: '##meta'
    Link:
      type: object
      properties:
        first:
          type: string
          nullable: true
          example: https://stage.api.mazzon.ru/categories?page=1
        next:
          type: string
          nullable: true
          example: https://stage.api.mazzon.ru/categories?page=2
        last:
          type: string
          nullable: true
          example: https://stage.api.mazzon.ru/categories?page=10
        prev:
          type: string
          nullable: true
          example: https://stage.api.mazzon.ru/categories
      xml:
        name: '##link'
    MetaLink:
      type: object
      properties:
        url:
          type: string
          nullable: true
          example: https://stage.api.mazzon.ru/categories?page=1
        label:
          type: string
          nullable: true
          example: Next &raquo;
        active:
          type: boolean
          nullable: true
          example: true
      xml:
        name: '##metalink'
    UserTokenData:
      type: object
      properties:
        user:
          $ref: '#/components/schemas/User'
        token:
          type: string
          nullable: true
          example: "4|MKwytytimtAsuTZBJoHxRob6cW2xioOw8YVxFNU7ecc39fda"
      xml:
        name: '##token_data'

    Specification:
      type: object
      properties:
        id:
          type: integer
          format: int64
          example: 1
        name:
          type: string
          example: Color
        description:
          type: string
          nullable: true
          example: Color of product
        values:
          type: array
          items:
            $ref: '#/components/schemas/SpecificationValue'
        created_at:
          type: string
          example: "2024-05-03T11:01:13.000000Z"
        updated_at:
          type: string
          example: "2024-05-03T11:01:13.000000Z"
      xml:
        name: '##specification'

    SpecificationValue:
      type: object
      properties:
        id:
          type: integer
          format: int64
          example: 1
        specification_id:
          type: integer
          format: int64
          example: 2
        name:
          type: string
          example: Red
        created_at:
          type: string
          example: "2024-05-03T11:01:13.000000Z"
        updated_at:
          type: string
          example: "2024-05-03T11:01:13.000000Z"
      xml:
        name: '##specification_value'
    
    Product:
      type: object
      properties:
        id:
          type: integer
          format: int64
          example: 1
        product_category_id:
          type: integer
          format: int64
          example: 2
        name:
          type: string
          example: 3D Detail
        slug:
          type: string
          example: 3d-detail
          nullable: true
        description:
          type: string
          example: Test model description
          nullable: true
        price:
          type: float
          example: 12.00
        category:
          $ref: '#/components/schemas/ProductCategory'
        specifications:
          type: array
          items:
            $ref: '#/components/schemas/Specification'
        created_at:
          type: string
          example: "2024-05-03T11:01:13.000000Z"
        updated_at:
          type: string
          example: "2024-05-03T11:01:13.000000Z"
      xml:
        name: '##product'

    CartProduct:
      type: object
      properties:
        id:
          type: integer
          format: int64
          example: 1
        product_category_id:
          type: integer
          format: int64
          example: 2
        name:
          type: string
          example: 3D Detail
        slug:
          type: string
          example: 3d-detail
          nullable: true
        description:
          type: string
          example: Test model description
          nullable: true
        price:
          type: float
          example: 12.00
        created_at:
          type: string
          example: "2024-05-03T11:01:13.000000Z"
        updated_at:
          type: string
          example: "2024-05-03T11:01:13.000000Z"
        quantity:
          type: integer
          format: int32
          example: 1
      xml:
        name: '##cart_product'

    Cart:
      type: object
      properties:
        items:
          type: array
          items:
            $ref: '#/components/schemas/CartProduct'
        total_price:
          type: float
          example: 1200.00
        total_quantity:
          type: integer
          format: int64
          example: 1
      xml:
        name: '##cart'

    ProductCategory:
      type: object
      properties:
        id:
          type: integer
          format: int64
          example: 1
        parent_id:
          type: integer
          format: int64
          example: 1
        name:
          type: string
          example: Project1
        slug:
          type: string
          example: project1
          nullable: true
        description:
          type: string
          example: "Category description"
          nullable: true
        products_count:
          type: integer
          format: int64
          example: 12
        created_at:
          type: string
          example: "2024-05-03T11:01:13.000000Z"
        updated_at:
          type: string
          example: "2024-05-03T11:01:13.000000Z"
        children:
          type: array
          items:
            $ref: '#/components/schemas/ProductCategoryShort'
          nullable: true
      xml:
        name: '##product_category'

    ProductCategoryShort:
      type: object
      properties:
        id:
          type: integer
          format: int64
          example: 1
        parent_id:
          type: integer
          format: int64
          example: 1
        name:
          type: string
          example: Project1
        slug:
          type: string
          example: project1
          nullable: true
        description:
          type: string
          example: "Category description"
          nullable: true
        created_at:
          type: string
          example: "2024-05-03T11:01:13.000000Z"
        updated_at:
          type: string
          example: "2024-05-03T11:01:13.000000Z"
      xml:
        name: '##product_category_short'

    Order:
      type: object
      properties:
        id:
          type: integer
          format: int64
          example: 1
        user_id:
          type: integer
          format: int64
          example: 1
        customer_email:
          type: string
          example: customer@test.com
        customer_phone:
          type: string
          example: "+77024441144"
        created_at:
          type: string
          example: "2024-05-03T11:01:13.000000Z"
        updated_at:
          type: string
          example: "2024-05-03T11:01:13.000000Z"
        items:
          type: array
          items:
            $ref: '#/components/schemas/OrderItem'
        user:
          type: object
          $ref: '#/components/schemas/User'
          nullable: true
      xml:
        name: '##order'

    OrderItem:
      type: object
      properties:
        id:
          type: integer
          format: int64
          example: 1
        order_id:
          type: integer
          format: int64
          example: 1
        product_id:
          type: integer
          format: int64
          example: 1
        quantity:
          type: integer
          format: int64
          example: 3
        price:
          type: float
          example: 12.00
        sum:
          type: float
          example: 36.00
        created_at:
          type: string
          example: "2024-05-03T11:01:13.000000Z"
        updated_at:
          type: string
          example: "2024-05-03T11:01:13.000000Z"
        product:
          type: object
          $ref: '#/components/schemas/Product'
      xml:
        name: '##order_item'

    User:
      type: object
      properties:
        id:
          type: integer
          format: int64
          example: 1
        name:
          type: string
          example: Admin
        email:
          type: string
          example: ivan@test.com
        roles:
          type: array
          items:
            $ref: '#/components/schemas/Role'
        created_at:
          type: string
          example: "2024-05-03T11:01:13.000000Z"
        updated_at:
          type: string
          example: "2024-05-03T11:01:13.000000Z"
      xml:
        name: '##user'
    Role:
      type: object
      properties:
        id:
          type: integer
          format: int64
          example: 1
        name:
          type: string
          example: Администратор
        slug:
          type: string
          example: admin
        created_at:
          type: string
          example: "2024-04-02T11:01:13.000000Z"
        updated_at:
          type: string
          example: "2024-04-02T11:01:13.000000Z"
      xml:
        name: '##role'
  securitySchemes:
    bearer:
      type: apiKey
      description: Bearer Token to authorize requests. If you don't have an User API Token, use method `/login` for get Bearer token.
      name: Authorization
      in: header
